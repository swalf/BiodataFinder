#!/usr/bin/env ruby
#
# This is a command line interface for BiodataFinder
#
# Author::    Alessandro Bonfanti  (mailto:swalf@users.noreply.github.com)
# Copyright:: Copyright (c) 2014, Alessandro Bonfanti
# License::   GNU GPLv3

require 'thor'
require_relative '../lib/bdf-indexer.rb'
require_relative '../lib/bdf-finder.rb'
require 'elasticsearch'

$conf_file = ENV['HOME'] + "/.biodatafinder/bdf.conf"

class BDFcli < Thor
    @def_index
    
    private
    
    def load_setup
		unless File.exist? $conf_file
			File.open($conf_file, "w").puts "# bdf-cli config file:", "# sintax 'key':'value'"
		end
		File.open($conf_file,"r") do |file|
			file.each do |line|
				next if line[0] == '#'
				key, value = line.split(':') 
				case key
				when "def_index"
					@def_index = value.downcase.chomp
				when "indexes"
					value[-1]= "" if value[-1] == "\n"
					@indexes = value.split(',')
				else 
					raise "Config file entain wrong fields!"
				end
			end
		end
	rescue RuntimeError => e
		if e.message == "Config file entain wrong fields!"
			$stderr.puts "Error: #{exc.message}", "Config file will be not loaded."
		else
			$stderr.puts "Error: #{exc.message}"
		end
	end
    
	def store_setup   
		File.open($conf_file,"w") do |file|
			file.puts( 
				"# bdf-cli config file:",
				"# sintax 'key':'value'",
				"def_index:#{@def_index}",
				"indexes:#{@indexes.join(',')}"
			)		
		end
	rescue RuntimeError => e
		$stderr.puts "ERROR: " + e.message      
	end
    	
    
    public
        
    desc "index FILEPATH", "Index a specificated file"
    method_option :index, :aliases => "-i", :desc => "Specify the index where the input file will be indexed, elsewere were used default"
    method_option :filetype, :aliases => "-t", :desc => "Specify the filetype, elsewere indexer will try to deduce filetype from extension"
    def index (filepath)
        load_setup
        if options[:index] != nil
            index = options[:index]
        else
            if @def_index != nil
                index = options[:index]
            else
                raise "If you don't specify an espicit index, you have to set default index key with setdef command."
            end
        end
		unless @indexes.include? index
			@indexes << index
			store_setup
		end
        client = Elasticsearch::Client.new log: false
        indexer = Indexer.new client, index
        indexer.parse filepath, options[:filetype]
		puts "Ok, '#{filepath}' processed" 
    rescue Faraday::ConnectionFailed => e
        puts "It seems that there is no running istance of ElasticSearch, plese start it before use bdf-cli."
    rescue RuntimeError => e
        $stderr.puts "ERROR: " + e.message
    end
    
    desc "setdef --FIELD_NAME=VALUE", "Set the default fields to a value"
    method_option :index, :aliases => "-i", :desc => "Set the default index name"
    def setdef
        load_setup
        options.each_pair do |field,value|  
            case field
            when "def_index"
            	raise "'#{value}' is not a valid index!" unless @indexes.include? value
                @def_index = value
                store_setup 
                puts "Default index = #{@def_index}"
            when "indexes"
            	@indexes = value.split(',') #security check needed
            	store_setup    
            	puts "Indexes = #{@indexes}"
            when "sinatra_def_output"
            	raise "'#{value}' is not a valid output format for bdf-si" unless ((value == "rawline") || (value == "pretty_json") || (value == "json"))
            	@sinatra_def_output = value
            	store_setup
            	puts "Default bdf-si output format = #{@sinatra_def_output}"
            else
                raise "Wrong field!"
            end
        end
    rescue RuntimeError => e
        $stderr.puts "ERROR: " + e.message    
    end
    
    desc "search TEXT TO SEARCH", "Search a string of text in an index"
    method_option :index, :aliases => "-i", :desc => "Specifify in which index search will be implemented, '*' for all indeces, elsewere default will be used."
    method_option :output_format, :aliases => "-f", :desc => "Specify the format of output, allovable values are 'json', 'rawline', 'pretty_output'."
    def search (*text)
        load_setup
        client = Elasticsearch::Client.new log: false
        index = options[:index]
        index = @def_index if index.nil?
        raise "If you don't specify an espicit index, you have to set default index key with setdef command." if index.nil?
        finder = Finder.new(client, index)
        query_text = text.join(' ')
        of = options[:output_format]
        of = 'pretty_json' if of.nil?
		raise "Wrong output format!" unless ["json","pretty_json","object"].include? of
        results = finder.query query_text
        puts "#{results[:gen_infos][:nres]} result(s) found (max score #{results[:gen_infos][:max_scores]}):"
        results[:objs].each_with_index do |obj,i|
            puts(
				"=======",
				"Result #{i+1}",
				"score: #{obj[:infos][:scores]}",
				"type: #{obj[:infos][:filetype]}",
				"file: #{obj[:infos][:filepath]}",
				"-------"
			)
			case of
			when 'pretty_json'
				puts (JSON.pretty_generate obj[:data])
			when 'json'
				puts (JSON.generate obj[:data])
			when 'object'
				puts obj[:data].to_s
			end
        end
    rescue Faraday::ConnectionFailed
        puts "It seems that there is no running istance of ElasticSearch, plese start it before use bdf-cli."
	rescue RuntimeError => e
		$stderr.puts "ERROR: " + e.message    
	end
    
	
	desc "ilist","List indexes"
	method_option :output_format, :aliases => "-f", :desc => "Specify the format of output, allovable values are 'json', 'rawline', 'pretty_output'."
	def ilist
		load_setup
		of = options[:output_format] || 'pretty_json'
		case of
		when 'pretty_json'
			puts JSON.pretty_generate(@indexes)
		when 'json'
			puts JSON.generate(@indexes)
		when 'list'
			puts @indexes
		else
			raise "Invalid output format"
		end
	end
	
	desc "delete", "Delete indexes or files"
	method_option :index, :aliases => "-i", :desc => "Delete index with name OPTION_ARG"
	method_option :file, :aliases => "-f", :desc => "Delete all documents of file with name OPTION_ARG"
	def delete
		load_setup
		client = Elasticsearch::Client.new log: false
		if !options[:index].nil?
			raise "'#{options[:index]}' is not a valid index!" unless @indexes.include? options[:index]
			client.indices.delete index: options[:index]
			@indexes.delete options[:index]
			puts "OK, '#{options[:index]}' deleted"
		elsif option[:file].any?
			puts "Sorry, not yet implemented."
		end
	rescue Faraday::ConnectionFailed
		puts "It seems that there is no running istance of ElasticSearch, plese start it before use bdf-cli."
	rescue RuntimeError => e
		$stderr.puts "ERROR: " + e.message  
	ensure
		store_setup
	end
	  
	
		
    
end

BDFcli.start ARGV

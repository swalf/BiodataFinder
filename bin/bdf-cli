#!/usr/bin/env ruby
#
# This is a command line interface for BiodataFinder
#
# Author::    Alessandro Bonfanti  (mailto:swalf@users.noreply.github.com)
# Copyright:: Copyright (c) 2014, Alessandro Bonfanti
# License::   GNU GPLv3


require 'thor'
require_relative '../lib/BDFClient.rb'


class BDFcli < Thor
	
	$conf_file = ENV['HOME'] + "/.biodatafinder/bdf.conf"
			
	    
    public
	
	desc "init_setup (-b SETTINGS || -i)", "Set mandatory initial settings for BDF"
	method_option :interactive, :aliases => "-i", :desc => "Do initial setup via interactive mode"
	method_option :batch, :aliases => "-b", :desc => "Do initial setup via batch mode"
	def init_setup 
		raise "You have to use only a option (-i for interactive, -b for batch)" unless (options[:interactive].nil? ^ options[:batch].nil?)
		if options[:batch].nil?
			settings = Hash.new
			puts(
				"Welcome in the interactive setup for BiodataFinder!",
				"Please insert URL where BDF can find ElasticSearch server: "
			)
			settings[:host] = STDIN.gets.chomp
			#check controls here
			puts "Insert at most number of results that BDF will return: "
			settings[:max_results] = STDIN.gets.to_i
			#check controls here
			puts "In you have already an ElasticSearch database for BDF please insert its index name, otherwise leave the field empty"
			settings[:index] = STDIN.gets.downcase.chomp
			if settings[:index] == ""
				idx_exists = false
				puts "Do you want a custom name for your BDF database? If yes fill the fields with it, otherwise leave the field empty."
				settings[:index] = STDIN.gets.downcase.chomp
				settings[:index] = "biodatafinder_db" if settings[:index] == ""
				# Shuold be checked if index already exist
			else
				idx_exists = true
			end
				
			BDFClient.new settings[:host], settings[:index], idx_exists
			
		else
			puts "Sorry batch setup not yet implemented, use for now the interactive one."
		end
		
		Dir.mkdir (File.dirname conf_file) unless Dir.exist? (File.dirname $conf_file) 
		File.open($conf_file,"w") do |file|
			file.puts (JSON.pretty_generate settings)
		end
		puts "Initial settings complete!"
		#rescue here...
	rescue RuntimeError => e
		puts e.message
	end
        
    desc "index FILEPATH", "Index a specificated file"
    method_option :filetype, :aliases => "-t", :desc => "Specify the filetype, elsewere indexer will try to deduce filetype from extension"
    def index (filepath)
		load_setup
		#check controls here
		puts "Indexing '#{filepath}'"
		
		log = $bdf_client.parse(filepath, options[:filetype])
		
		puts "Ok, '#{filepath}' processed" if log == :ok
    
    end
    	                 
		                 
    desc "set --FIELD_NAME=VALUE", "Set the config fields"
    method_option :index, :aliases => "-i", :desc => "Set the default index name."
	method_option :host, :aliases => "-h", :desc => "Set the default ES host."
	method_option :indexes, :aliases => "-x", :desc => "Set the indexes that bdf have to manage."
	method_option :max_results, :aliases => "-m", :desc => "Set the max number of results displayed."
    def set
		load_setup
		
        options.each_pair do |field,value|  
            case field
            when "index"
            	settings[:index] = value  
				puts "Default index = #{settings[:index]}"
			when "host"
				settings[:host] = value
				puts "Host = #{settings[:host]}"
			when "max_results"
				raise "'#{value}' isn't a correct set for max_results. Puts an integer >= 1." if value.to_i == 0 
				settings[:max_results] = value.to_i 
				puts "Max number of results displayed = #{settings[:max_results]}"
            else
                raise "Wrong field!"
            end
        end 
		File.open($conf_file,"w") do |file|
			file.puts (JSON.pretty_generate settings)
		end
    end
    
    desc "search TEXT TO SEARCH", "Search a string of text in an index"
	method_option :files, :aliases => "-f", :desc => "Specifify in which files search will be implemented, elsewere alls will be used."
    method_option :output_format, :aliases => "-o", :desc => "Specify the format of output, allovable values are 'json', 'rawline', 'pretty_output'."
    def search (query_text)
		load_setup
        
        of = options[:output_format]
        of = 'pretty_json' if of.nil?
		raise "Wrong output format!" unless ["json","pretty_json","object"].include? of
		
        results = $bdf_client.search query_text, {max_results: $max_results}
        puts "#{results[:gen_infos][:nres]} result(s) found (max score #{results[:gen_infos][:max_scores]}):"
        results[:objs].each_with_index do |obj,i|
            puts(
				"=======",
				"Result #{i+1}",
				"score: #{obj[:infos][:scores]}",
				"type: #{obj[:infos][:filetype]}",
				"file: #{obj[:infos][:filepath]}",
				"-------"
			)
			case of
			when 'pretty_json'
				puts (JSON.pretty_generate obj[:data])
			when 'json'
				puts (JSON.generate obj[:data])
			when 'object'
				puts obj[:data].to_s
			end
        end
	end
    
	
	desc "list","List indexes or file"
	method_option :indexes, :aliases => "-i", :desc => "List all indexes"
	method_option :files, :aliases => "-f", :desc => "List all files"
	method_option :output_format, :aliases => "-o", :desc => "Specify the format of output, allovable values are 'json', 'rawline', 'pretty_output'."
	def list
		load_setup
		
		of = options[:output_format] || 'pretty_json'
		raise "You have to use only a flag (-i for indexes, -f for files)" unless (options[:indexes].nil? ^ options[:files].nil?)
		target = options[:indexes].nil? ? $bdf_client.files : $bdf_client.indices 
		case of
		when 'pretty_json'
			puts JSON.pretty_generate(target)
		when 'json'
			puts JSON.generate(target)
		when 'list'
			puts target
		else
			raise "Invalid output format"
		end  
	end
	
	
	desc "delete", "Delete indexes or files"
	method_option :index, :aliases => "-i", :desc => "Delete index with name OPTION_ARG"
	method_option :file, :aliases => "-f", :desc => "Delete all documents of file with name OPTION_ARG"
	def delete
		raise "Use only one option '-f' for files, '-i' for indexes!" unless options[:index].nil? ^ options[:file].nil?
		load_setup
		if options[:index].is_a? String
			$bdf_client.erase_bdf_db options[:index]
			puts "OK, '#{options[:index]}' deleted"
		elsif options[:file].is_a? String
			$bdf_client.delete options[:file]
			puts "OK, '#{options[:file]}' deleted from BiodataFinder database"
		end
	
	end
	
		                
	desc "puts_infos", "Show program infos"
	method_option :version, :aliases => "-v", :desc => "Show version number"
	def puts_infos
		if options[:version] != nil
			puts "BiodataFinder #{BDFClient.version}."
		else 
			puts(
				"This is bdf-cli, a command line interface for BiodataFinder",
				"BiodataFinder #{BDFClient.version},  Copyright (C) 2014  Alessandro Bonfanti",
				"This program comes with ABSOLUTELY NO WARRANTY;",
				"This is free software, and you are welcome to redistribute it under certain conditions.",
				"See http://www.gnu.org/licenses/gpl.html GNU_GPLv3 licence for details."			
			)
		end
	end
		
	default_task :puts_infos
	
	private
	
	def load_setup 
		raise "No conf file fouds in '#{$conf_file}'. Please run 'bdf-cli init_setup' first." unless File.exist? $conf_file
		File.open($conf_file,"r") do |file|
			contents = file.inject("") {|text, line| text+=line}
			contents.gsub! "\n", " "
			chash = JSON.parse contents
			$bdf_client = BDFClient.new chash['host'], chash['index'], true
			$max_results = chash['max_results']
		end	
	end
		
    
end

BDFcli.start ARGV

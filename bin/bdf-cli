#!/usr/bin/env ruby
#
# This is a command line interface for BiodataFinder
#
# Author::    Alessandro Bonfanti  (mailto:swalf@users.noreply.github.com)
# Copyright:: Copyright (c) 2014, Alessandro Bonfanti
# License::   GNU GPLv3


require 'thor'
require_relative '../lib/BDFClient.rb'


class BDFcli < Thor
    
	    
    public
        
    desc "index FILEPATH", "Index a specificated file"
    method_option :filetype, :aliases => "-t", :desc => "Specify the filetype, elsewere indexer will try to deduce filetype from extension"
    def index (filepath)
        bdf_client = BDFClient.new
		
		#check controls here
		puts "Indexing '#{filepath}'"
		
		bdf_client.parse(filepath, options[:filetype]
		
		puts "Ok, '#{filepath}' processed" 
    
    end
    	                 
		                 
    desc "set --FIELD_NAME=VALUE", "Set the config fields"
    method_option :def_index, :aliases => "-i", :desc => "Set the default index name."
	method_option :host, :aliases => "-h", :desc => "Set the default ES host."
	method_option :indexes, :aliases => "-x", :desc => "Set the indexes that bdf have to manage."
	method_option :max_results, :aliases => "-m", :desc => "Set the max number of results displayed."
    def set
        load_setup
		bdf_client = BDFClient.new                
        options.each_pair do |field,value|  
            case field
            when "def_index"
            	bdf_client.def_index = value  
                puts "Default index = #{bdf_client.def_index}"
			when "host"
				
				bdf_client.host = value
				puts "Host = #{bdf_client.host}"
			when "max_results"
				raise "'#{value}' isn't a correct set for max_results. Puts an integer >= 1." if value.to_i == 0 
				bdf_client.max_results = value.to_i 
				puts "Max number of results displayed = #{bdf_client.max_results}"
            else
                raise "Wrong field!"
            end
        end 
    end
    
    desc "search TEXT TO SEARCH", "Search a string of text in an index"
	method_option :files, :aliases => "-f", :desc => "Specifify in which files search will be implemented, elsewere alls will be used."
    method_option :output_format, :aliases => "-o", :desc => "Specify the format of output, allovable values are 'json', 'rawline', 'pretty_output'."
    def search (*text)
        
		bdf_client = BDFClient.new
        
        of = options[:output_format]
        of = 'pretty_json' if of.nil?
		raise "Wrong output format!" unless ["json","pretty_json","object"].include? of
		
		
        results = bdf_client.search query_text
        puts "#{results[:gen_infos][:nres]} result(s) found (max score #{results[:gen_infos][:max_scores]}):"
        results[:objs].each_with_index do |obj,i|
            puts(
				"=======",
				"Result #{i+1}",
				"score: #{obj[:infos][:scores]}",
				"type: #{obj[:infos][:filetype]}",
				"file: #{obj[:infos][:filepath]}",
				"-------"
			)
			case of
			when 'pretty_json'
				puts (JSON.pretty_generate obj[:data])
			when 'json'
				puts (JSON.generate obj[:data])
			when 'object'
				puts obj[:data].to_s
			end
        end
	end
    
	
	desc "list","List indexes or file"
	method_option :indexes, :aliases => "-i", :desc => "List all indexes"
	method_option :files, :aliases => "-f", :desc => "List all files"
	method_option :output_format, :aliases => "-o", :desc => "Specify the format of output, allovable values are 'json', 'rawline', 'pretty_output'."
	def list
		bdf_client = BDFClient.new
		of = options[:output_format] || 'pretty_json'
		raise "You have to use only a flag (-i for indexes, -f for files)" unless (options[:indexes].nil? ^ options[:files].nil?)
		target = options[:indexes].nil? ? bdf_client.files : bdf_client.indices 
		case of
		when 'pretty_json'
			puts JSON.pretty_generate(target)
		when 'json'
			puts JSON.generate(target)
		when 'list'
			puts target
		else
			raise "Invalid output format"
		end  
	end
	
	
	desc "delete", "Delete indexes or files"
	method_option :index, :aliases => "-i", :desc => "Delete index with name OPTION_ARG"
	method_option :file, :aliases => "-f", :desc => "Delete all documents of file with name OPTION_ARG"
	def delete
		raise "Use only one option '-f' for files, '-i' for indexes!" unless options[:index].nil? ^ options[:file].nil?
		bdf_client = BDFClient.new
		if options[:index].any?
			bdf_client.remove_index options[:index]
			puts "OK, '#{options[:index]}' deleted"
		elsif options[:file].any?
			bdf_client.delete options[:file]
			puts "OK, '#{options[:file]}' deleted"
		end
	
	end
	
		                
	desc "puts_infos", "Show program infos"
	method_option :version, :aliases => "-v", :desc => "Show version number"
	def puts_infos
		if options[:version] != nil
			puts "BiodataFinder #{$Version}."
		else 
			puts(
				"This is bdf-cli, a command line interface for BiodataFinder",
				"BiodataFinder #{$Version},  Copyright (C) 2014  Alessandro Bonfanti",
				"This program comes with ABSOLUTELY NO WARRANTY;",
				"This is free software, and you are welcome to redistribute it under certain conditions.",
				"See http://www.gnu.org/licenses/gpl.html GNU_GPLv3 licence for details."			
			)
		end
	end
		
	default_task :puts_infos
		
    
end

BDFcli.start ARGV

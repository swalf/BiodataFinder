#!/usr/bin/env ruby
#
# This is a Sinatra web interface for Biodatafinder
#
# Author::    Alessandro Bonfanti  (mailto:swalf@users.noreply.github.com)
# Copyright:: Copyright (c) 2014, Alessandro Bonfanti
# License::   GNU GPLv3

require 'sinatra'
require 'sass'
require "sinatra/json"
require "sinatra/cookies"


if development?
	require_relative '../lib/biodatafinder.rb'
else
	require 'bdf_client'
end

$conf_file = ENV['HOME'] + "/.biodatafinder/bdf-si.conf"

if File.exists? $conf_file
	File.open($conf_file,"r") do |file|
		contents = file.inject("") {|text, line| text+=line}
		contents.gsub! "\n", " "
		chash = JSON.parse contents
		$si_port = chash['si_port']
		$es_address = chash['es_address']
		$bdf_index = chash['bdf_index']
		$max_results = chash['max_results']
	end
end

i = 0
while !ARGV[i].nil?
	argn, value = ARGV[i].split('=')
	case argn
	when 'port'
		$si_port = value.to_i
	when 'es_address'
		$es_address = value
	when 'bdf_index'
		$bdf_index = value
	when 'max_results'
		$max_results = value.to_i
	end
	i += 1
end
raise "I can't load all needed settings from config file or commandline." unless $si_port && $es_address && $bdf_index && $max_results
Biodatafinder::Client.new $es_address, $bdf_index, true


#Error classes:
class BdfSIError < RuntimeError
end

class QueryError < BdfSIError
end
#End error classes

class BdfSI < Sinatra::Base


	configure do
		set :port, $si_port
		set :root, File.expand_path(File.dirname(__FILE__)) + "/../app/"
		enable :sessions
		set :bind, '0.0.0.0'
	end

	get ('/styles.css') { scss :styles }

	get '/' do
	    redirect to("/search")
	end

	get '/search' do
	    @title = "BDF search"
	    @search
	    erb :search
	end

	get '/search/q' do
		begin
			raise QueryError.new("Malformed query!") if @params[:src].nil?

			@params[:out] = 'table' if @params[:out].nil?

			@title = "Results for '#{@params[:src]}' in '#{$bdf_index}'"

			bdf_client = (Biodatafinder::Client.new $es_address, $bdf_index, true)
			$max_results = params[:nres].to_i unless params[:nres].nil?
			opt_hash = {max_results: $max_results}
			case params[:filter]
			when 'filelist'
				opt_hash.update files_list: @params[:files]
				# p '++++++++++++++++++++++filelist'
				p @params[:files].to_s
			when 'dirlist'
				opt_hash.update dir_list: @params[:directories]
				# p '++++++++++++++++++++++dirlist'
				p @params[:directories].to_s
			end
			opt_hash.update filetype: @params[:filetype] unless @params[:filetype] == 'ALL'
			results = (bdf_client.search @params[:src], opt_hash)


			case @params[:out]
			when 'table'
				if results[:gen_infos][:nres] != 0
					@res_preamble = "#{results[:gen_infos][:nres]} result(s) found (max score #{results[:gen_infos][:max_scores]}):\n"
					@tables = Array.new
					table = Hash.new
					table[:headers] = (results[:objs].first)[:data].keys
					table[:data] =  []
					results[:objs].each_with_index do |obj,i|
						row = obj[:data].values
						if obj[:data].keys == table[:headers]
							table[:data] << row
						else
							@tables << table
							table = Hash.new
							table[:headers] = obj[:data].keys
							table[:data] = [row]
						end
					end
					@tables << table
					erb :restable
				else
					@res_preamble = "Sorry, I can't find anything for this search terms."
					erb :restable
				end
			when 'inline'
				if results[:gen_infos][:nres] != 0
					@res_preamble = "#{results[:gen_infos][:nres]} result(s) found (max score #{results[:gen_infos][:max_scores]}):\n"
					@resultdata = Array.new
					results[:objs].each_with_index do |obj,i|
						data = Hash.new
						data[:number] = i
						data[:score] = obj[:infos][:scores]
						data[:filetype] = obj[:infos][:filetype]
						data[:filepath] = obj[:infos][:filepath]
						data[:headers] = obj[:data].keys
						data[:data] = obj[:data].values
						@resultdata << data
					end
					erb :search_inline
				else
					@res_preamble = "Sorry, I can't find anything for this search terms."
					erb :restable
				end
			when 'pretty_json'
				content_type :json
				JSON.pretty_generate results
			when 'json'
				content_type :json
				JSON.generate results
			else
				raise "An unknown output (#{@params[:out]}) has been requested."
			end

		rescue Faraday::ConnectionFailed => e
			unless ["json", "pretty_json"].include? @params[:out]
				@es_error = "It seems that there is no running instance of ElasticSearch, please start it before use bdf-si."
				erb :es_error
			else
				results = { "status" => "error", "gen_infos" => {"error_type" => "No ElasticSearch instance found" }}
				content_type :json
				(@params[:out] == 'pretty_json') ? (JSON.pretty_generate results) : (JSON.generate results)
			end
		rescue Elasticsearch::Transport::Transport::Errors::NotFound => e
			unless ["json", "pretty_json"].include? @params[:out]
				@es_error = "'#{$bdf_index}' is not a valid index!"
				erb :es_error
			else
				results = { "status" => "error", "gen_infos" => {"error_type" => "'#{$bdf_index}' is not a valid index!" }}
				content_type :json
				(@params[:out] == 'pretty_json') ? (JSON.pretty_generate results) : (JSON.generate results)
			end

		rescue Elasticsearch::Transport::Transport::Errors::BadRequest => e
			unless ["json", "pretty_json"].include? @params[:out]
				@es_error = "'#{@params[:src]}' this is not a valid search (do not fill it only by delimiters)! <#{e.message}>"
				erb :es_error
			else
				results = { "status" => "error", "gen_infos" => {"error_type" => "'#{@params[:src]}' is not a valid search" }}
				content_type :json
				(@params[:out] == 'pretty_json') ? (JSON.pretty_generate results) : (JSON.generate results)
			end

		rescue Elasticsearch::Transport::Transport::Error => e
			unless ["json", "pretty_json"].include? @params[:out]
				@es_error = "ElasticSearch error occurred: #{e.message}"
				erb :es_error
			else
				results = { "status" => "error", "gen_infos" => {"error_type" => "ElasticSearch error: #{e.message}" }}
				content_type :json
				(@params[:out] == 'pretty_json') ? (JSON.pretty_generate results) : (JSON.generate results)
			end

		rescue QueryError => e
			@es_error = "A problem with your query has occurred: #{e.message}"

		rescue RuntimeError => e
			@es_error = e.message
			erb :es_error
		end
	end

	get '/msettings' do
		@title = "BDF - Advenced search"
		bdf_client = (Biodatafinder::Client.new $es_address, $bdf_index, true)
		@files = bdf_client.files
		@filetypes = bdf_client.supported_types
		@directories = @files.inject [] {|acc,file| acc << (File.dirname file)}
		@directories.uniq!
		erb :msettings
	end

	get '/about' do
	    erb :about
	end

	get '/files' do
		content_type :json
		bdf_client = (Biodatafinder::Client.new $es_address, $bdf_index, true)
		bdf_client.files.to_json
	end

	not_found do
	    erb :not_found
	end

	run!

end #class
